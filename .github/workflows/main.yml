name: CI

on: 
  push:
    paths-ignore:
      - '**.md'

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  OPENFAAS_GATEWAY: ${{ secrets.OPENFAAS_GATEWAY }}
  OPENFAAS_USERNAME: ${{ secrets.OPENFAAS_USERNAME }}
  OPENFAAS_PASSWORD: ${{ secrets.OPENFAAS_PASSWORD }}

jobs:

  test-simple:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        cp -Rf test/* .
    - name: Test setup - Build the function stack and deploy it
      id: build-simple
      uses: './'
      with:
        stack-file: './simple.yml'
        docker-username: ${{ env.DOCKER_USERNAME }}
        docker-password: ${{ env.DOCKER_PASSWORD }}
        platforms: linux/amd64,linux/arm/v7
    - name: Test execution
      run: |
        export repo=mrsimpson/unit-test-simple
        curl --fail -H "Authorization: Bearer $(curl --fail -sSL "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${repo}:pull" | jq --raw-output .token)" "https://index.docker.io/v2/${repo}/manifests/${TAG}" | grep "fprocess=echo simple"
      env:
        TAG: ${{ steps.build-simple.outputs.tag }}
    - name: Login to Dockerhub
      run: |
        echo "::set-env name=DOCKER_JWT::$(curl --fail -s -H "Content-Type: application/json" -X POST -d "{ \"username\": \"${DOCKER_USERNAME}\", \"password\": \"${DOCKER_PASSWORD}\"}" "https://hub.docker.com/v2/users/login/" | jq -r .token)"
    - name: delete simple-image
      run: |
        curl --fail "https://hub.docker.com/v2/repositories/mrsimpson/unit-test-simple/tags/${TAG}/" -X DELETE -H "Authorization: JWT ${DOCKER_JWT}"
      env:
        TAG: ${{ steps.build-simple.outputs.tag }}

  test-multi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - run: |
        cp -Rf test/* .
    - name: Test setup - Build the function stack and deploy it
      id: build-multi
      uses: './'
      with:
        stack-file: './multi-function.yml'
        docker-username: ${{ env.DOCKER_USERNAME }}
        docker-password: ${{ env.DOCKER_PASSWORD }}
        platforms: linux/amd64
    - name: Test execution - validate first
      run: |
        export repo=mrsimpson/unit-test-first
        curl --fail -H "Authorization: Bearer $(curl --fail -sSL "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${repo}:pull" | jq --raw-output .token)" "https://index.docker.io/v2/${repo}/manifests/${TAG}" | grep "fprocess=echo first"
      env:
        TAG: ${{ steps.build-multi.outputs.tag }}
    - name: Test execution - validate second
      run: |
        export repo=mrsimpson/unit-test-second
        curl --fail -H "Authorization: Bearer $(curl --fail -sSL "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${repo}:pull" | jq --raw-output .token)" "https://index.docker.io/v2/${repo}/manifests/${TAG}" | grep "fprocess=echo second"
      env:
        TAG: ${{ steps.build-multi.outputs.tag }}
    - name: Login to Dockerhub
      run: |
        echo "::set-env name=DOCKER_JWT::$(curl --fail -s -H "Content-Type: application/json" -X POST -d "{ \"username\": \"${DOCKER_USERNAME}\", \"password\": \"${DOCKER_PASSWORD}\"}" "https://hub.docker.com/v2/users/login/" | jq -r .token)"
    - name: delete multi-image
      run: |
        curl --fail "https://hub.docker.com/v2/repositories/mrsimpson/unit-test-first/tags/${TAG}/" -X DELETE -H "Authorization: JWT ${DOCKER_JWT}"
        curl --fail "https://hub.docker.com/v2/repositories/mrsimpson/unit-test-second/tags/${TAG}/" -X DELETE -H "Authorization: JWT ${DOCKER_JWT}"
      env:
        TAG: ${{ steps.build-multi.outputs.tag }}

  test-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install faasd
      run: |
        sudo /sbin/sysctl -w net.ipv4.conf.all.forwarding=1
        sudo mkdir -p /opt/cni/bin
        curl -sSL https://github.com/containernetworking/plugins/releases/download/v0.8.5/cni-plugins-linux-amd64-v0.8.5.tgz | sudo tar -xz -C /opt/cni/bin
        sudo cp $(GOPATH)/src/github.com/openfaas/faasd/bin/faasd /usr/local/bin/
        cd $(GOPATH)/src/github.com/openfaas/faasd/ && sudo /usr/local/bin/faasd install
        sudo systemctl status -l containerd --no-pager
        sudo journalctl -u faasd-provider --no-pager
        sudo systemctl status -l faasd-provider --no-pager
        sudo systemctl status -l faasd --no-pager
        curl -sSLf https://cli.openfaas.com | sudo sh
    - name: Wait for OpenFaaS to be ready
      run: |
        for i in {1..10}
        do
          if [ $(sudo systemctl status -l faasd --no-pager | grep -c 'running') -eq 0 -a $(sudo systemctl status faasd-provider | grep -c 'running') -eq 0 ]; then
            export RUNNING=true
            break
          else 
            date && echo no
            export RUNNING=false
          fi
          sleep 5s
        done
        $RUNNING && exit 0
    - name: Get OpenFaaS password
      run: |
        echo "FaasD status"
        sudo systemctl status faasd
        sudo journalctl -u faasd --lines 40

        echo "FaasD provider status"
        sudo systemctl status faasd-provider
        sudo journalctl -u faasd-provider --lines 40
        echo "::set-env name=OPENFAAS_PASSWORD::$(sudo cat /var/lib/faasd/secrets/basic-auth-password)"
    - run: |
        cp -Rf test/* .
    - name: Test setup - Build the function stack and deploy it
      id: build-simple
      uses: './'
      with:
        stack-file: './simple.yml'
        docker-username: ${{ env.DOCKER_USERNAME }}
        docker-password: ${{ env.DOCKER_PASSWORD }}
        platforms: linux/amd64
        deploy: true
        openfaas-gateway: ${{ env.OPENFAAS_GATEWAY || 'http://localhost:8080' }}
        openfaas-username: ${{ env.OPENFAAS_USERNAME || 'admin' }}
        openfaas-password: ${{ env.OPENFAAS_PASSWORD }}
    - name: Test execution - Check whether the function exists in OpenFaaS
      run: |
        code=$(curl --write-out %{http_code} --silent --output /dev/null -u $OPENFAAS_USERNAME:$OPENFAAS_PASSWORD $OPENFAAS_GATEWAY/system/function/simple)
        if [ $code -eq 200 ]; then
          exit 0;
        else
          echo "Got HTTP code ${code}";
          exit 1;
        fi
  
  teardown-deployment:
    runs-on: ubuntu-latest
    if: always()
    needs: test-deploy
    steps:
    - name: delete deployed function
      run: |
        code=$(curl --write-out %{http_code} --silent --output /dev/null -u $OPENFAAS_USERNAME:$OPENFAAS_PASSWORD -X DELETE -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"functionName\": \"simple\"}" $OPENFAAS_GATEWAY/system/functions)
        if [ $code -eq 202 ]; then
          exit 0;
        else
          echo "Got HTTP code ${code}";
          exit 1;
        fi

  build-and-buffer:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Determine Image
      run: |
        echo "::set-env name=IMAGE_NAME::$(echo "docker.pkg.github.com/${REPOSITORY}/action:${SHA}")"
        echo "${IMAGE_NAME}"
      env:
        REPOSITORY: ${{ github.repository }}
        SHA: ${{ github.sha	}}
    - name: Build action image
      run: |
        docker build -t ${IMAGE_NAME} .
    - name: publish to github registry
      run: |
        docker login docker.pkg.github.com -u "${GITHUB_ACTOR}" -p "${GITHUB_TOKEN}"
        docker push "${IMAGE_NAME}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
